# .github/workflows/ci-release.yml
# This workflow is designed for a cross-platform Rust project.
# It triggers on every push and pull request to the 'main' branch for CI,
# and creates a release when a new tag is pushed.

name: Build, Test, and Release

on:
  # Trigger the workflow on pushes to the main branch
  push:
    branches:
      - main
  # Trigger the workflow on pull requests to the main branch
  pull_request:
    branches:
      - main
  # Allow manual triggering from the GitHub Actions UI
  workflow_dispatch:

jobs:
  # Job to run checks like formatting and clippy (linter)
  check:
    name: Check & Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run Clippy (linter)
        run: cargo clippy --all-targets -- -D warnings

  # Job to build and test on multiple platforms
  build_and_test:
    name: Build & Test on ${{ matrix.os }}
    # We need the 'check' job to pass first
    needs: check
    # Define the build matrix for cross-platform testing
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      # For Windows, we need to compile the resource file (ytdownloader.rc)
      # The build.rs script likely handles this, but we need the necessary build tools.
      # The `embed-resource` crate is commonly used for this.
      - name: Install Windows resource tools (Windows only)
        if: matrix.os == 'windows-latest'
        run: echo "Assuming build.rs uses a crate like 'embed-resource' which handles the .rc file."

      - name: Build project
        run: cargo build --verbose

      - name: Run tests
        run: cargo test --verbose

  # Job to create a release when a tag is pushed
  release:
    name: Create Release
    # This job should only run when a tag is pushed, not on every commit
    if: startsWith(github.ref, 'refs/tags/v')
    # It depends on the build_and_test job to ensure everything is working
    needs: build_and_test
    runs-on: ubuntu-latest # Use ubuntu to coordinate the release assets

    strategy:
      matrix:
        # Define the targets for which we want to build release binaries
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: ytdownloader-linux-x64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: ytdownloader-macos-x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: ytdownloader-windows-x64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain for target
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package artifacts
        shell: bash
        run: |
          # Define the binary path based on the OS
          BINARY_PATH="target/${{ matrix.target }}/release/ytdownloader"
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            BINARY_PATH="${BINARY_PATH}.exe"
          fi

          # Create a directory for the artifact
          mkdir -p release_assets

          # Copy the binary to the release assets directory
          cp "${BINARY_PATH}" "release_assets/${{ matrix.artifact_name }}"

          # Upload the artifact so it can be used by the final release step
          gh artifact upload release_assets/* --name ${{ matrix.artifact_name }}

      - name: Create GitHub Release
        # This step uses the GitHub CLI to create a release and attach the artifacts
        if: matrix.os == 'ubuntu-latest' # Run this step only once
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Download all artifacts uploaded by the previous steps
          gh artifact download

          # Create the release
          gh release create ${{ github.ref_name }} \
            --title "Release ${{ github.ref_name }}" \
            --notes "Automated release for version ${{ github.ref_name }}." \
            --draft \
            ytdownloader-*/* # Attach all downloaded artifacts
